Хорошо, давай выполним задания по шагам.

### Задание 8
1. **Создать роль**:
   Создадим роль, которая имеет доступ только к выборке данных из таблиц `employees` и `departments`.

   ```sql
   CREATE ROLE read_only_role;
   ```

2. **Выдать этой роли права**:
   Назначим роли `read_only_role` права на выполнение запросов `SELECT` на таблицы `employees` и `departments`.

   ```sql
   GRANT SELECT ON employees TO read_only_role;
   GRANT SELECT ON departments TO read_only_role;
   ```

3. **Назначить роль пользователю, проверить**:
   Создадим пользователя и назначим ему роль.

   ```sql
   CREATE USER user_a IDENTIFIED BY password_a;
   GRANT read_only_role TO user_a;
   ```

   После этого ты можешь подключиться как пользователь `user_a` и проверить, что он имеет доступ только для выполнения SELECT-запросов на таблицы `employees` и `departments`.

   ```sql
   -- Подключение как user_a
   SELECT * FROM employees;
   SELECT * FROM departments;
   ```

### Задание 9
1. **Отобрать роль у пользователя**:
   Если нужно отобрать роль у пользователя, используй команду `REVOKE`:

   ```sql
   REVOKE read_only_role FROM user_a;
   ```

2. **Создать роль с дополнительным логином, включить эту роль пользователю**:
   Создадим новую роль, которая также будет иметь права на вставку данных в таблицу `employees`.

   ```sql
   CREATE ROLE data_entry_role;
   GRANT INSERT ON employees TO data_entry_role;
   ```

   Назначим эту роль пользователю:

   ```sql
   GRANT data_entry_role TO user_a;
   ```

   **Включение роли**:
   Пользователь может включить роль:

   ```sql
   SET ROLE data_entry_role;
   ```

3. **Отключение роли**:
   Чтобы отключить роль, пользователь может использовать команду:

   ```sql
   RESET ROLE;
   ```

4. **Создать роль, попробовать унаследовать (выдать) целиком другую роль/несколько ролей**:
   Создадим роль `manager_role`, которая наследует права от роли `data_entry_role`:

   ```sql
   CREATE ROLE manager_role;
   GRANT data_entry_role TO manager_role;
   ```

   Теперь назначим эту роль пользователю:

   ```sql
   GRANT manager_role TO user_a;
   ```

### Задание 10
Для этого задания, давай возьмём предметную область, например, систему управления сотрудниками в компании.

#### Предметная область: **Управление сотрудниками**
- **Роли**:
  1. **read_only_role**: роль для просмотра данных сотрудников и отделов (права на SELECT).
  2. **data_entry_role**: роль для внесения новых сотрудников в таблицу `employees` (права на INSERT).
  3. **manager_role**: роль, которая наследует права от `data_entry_role` и дополнительно может управлять отделами (права на INSERT и UPDATE в таблице `departments`).

- **Пользователи**:
  1. **User A**: сотрудник отдела кадров, который может просматривать данные сотрудников (назначена роль `read_only_role`).
  2. **User B**: сотрудник, который отвечает за добавление новых сотрудников (назначена роль `data_entry_role`).
  3. **User C**: менеджер, который может не только добавлять сотрудников, но и управлять отделами (назначена роль `manager_role`).

#### Пример ролей и прав:
- `read_only_role`:
  ```sql
  GRANT SELECT ON employees TO read_only_role;
  GRANT SELECT ON departments TO read_only_role;
  ```

- `data_entry_role`:
  ```sql
  GRANT INSERT ON employees TO data_entry_role;
  ```

- `manager_role`:
  ```sql
  GRANT INSERT, UPDATE ON departments TO manager_role;
  GRANT data_entry_role TO manager_role;
  ```

### Ситуации, когда лучше использовать роли:
1. **Роли** удобны, когда у нас есть группы пользователей с одинаковыми правами (например, менеджеры или сотрудники отдела кадров). Создание ролей помогает централизованно управлять правами пользователей.
   
2. **Пользователи** с индивидуальными правами могут потребоваться, если один из них должен иметь доступ, который не перекрывается стандартными ролями (например, доступ к специфическим таблицам или операциям).

Диаграмма, которую можно создать для удобства, будет включать роли и пользователей, а также связи между ними. Роль `manager_role` наследует права от `data_entry_role`, а пользователь `User C` получает оба набора прав.

Если нужно дополнительно что-то настроить или исправить — дай знать!
