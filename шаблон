Вот шаблоны для защиты по структуре базы данных, пользователям и ролям, которые участники команды могут использовать для отчета и при защите перед преподавателем.

### 1. **Шаблон создания структуры базы данных**

```sql
-- Установим нужные параметры для базы данных
ALTER SESSION SET NLS_LANGUAGE=American;
ALTER SESSION SET NLS_TERRITORY=America;

-- Создание таблицы Regions
CREATE TABLE regions (
  region_id NUMBER CONSTRAINT regions_id_nn NOT NULL,
  region_name VARCHAR2(25)
);
CREATE UNIQUE INDEX reg_id_pk ON regions (region_id);
ALTER TABLE regions ADD CONSTRAINT reg_id_pk PRIMARY KEY (region_id);

-- Создание таблицы Countries
CREATE TABLE countries (
  country_id CHAR(2) CONSTRAINT country_id_nn NOT NULL,
  country_name VARCHAR2(40),
  region_id NUMBER,
  CONSTRAINT country_c_id_pk PRIMARY KEY (country_id)
);
ALTER TABLE countries ADD CONSTRAINT countr_reg_fk FOREIGN KEY (region_id) REFERENCES regions(region_id);

-- Создание таблицы Locations
CREATE TABLE locations (
  location_id NUMBER(4),
  street_address VARCHAR2(40),
  postal_code VARCHAR2(12),
  city VARCHAR2(30) CONSTRAINT loc_city_nn NOT NULL,
  state_province VARCHAR2(25),
  country_id CHAR(2)
);
ALTER TABLE locations ADD CONSTRAINT loc_id_pk PRIMARY KEY (location_id);
ALTER TABLE locations ADD CONSTRAINT loc_c_id_fk FOREIGN KEY (country_id) REFERENCES countries(country_id);

-- Создание таблицы Departments
CREATE TABLE departments (
  department_id NUMBER(4),
  department_name VARCHAR2(30) CONSTRAINT dept_name_nn NOT NULL,
  manager_id NUMBER(6),
  location_id NUMBER(4)
);
ALTER TABLE departments ADD CONSTRAINT dept_id_pk PRIMARY KEY (department_id);
ALTER TABLE departments ADD CONSTRAINT dept_loc_fk FOREIGN KEY (location_id) REFERENCES locations(location_id);

-- Создание таблицы Jobs
CREATE TABLE jobs (
  job_id VARCHAR2(10),
  job_title VARCHAR2(35) CONSTRAINT job_title_nn NOT NULL,
  min_salary NUMBER(6),
  max_salary NUMBER(6)
);
ALTER TABLE jobs ADD CONSTRAINT job_id_pk PRIMARY KEY(job_id);

-- Создание таблицы Employees
CREATE TABLE employees (
  employee_id NUMBER(6),
  first_name VARCHAR2(20),
  last_name VARCHAR2(25) CONSTRAINT emp_last_name_nn NOT NULL,
  email VARCHAR2(25) CONSTRAINT emp_email_nn NOT NULL,
  hire_date DATE CONSTRAINT emp_hire_date_nn NOT NULL,
  job_id VARCHAR2(10) CONSTRAINT emp_job_nn NOT NULL,
  salary NUMBER(8,2),
  manager_id NUMBER(6),
  department_id NUMBER(4)
);
ALTER TABLE employees ADD CONSTRAINT emp_emp_id_pk PRIMARY KEY (employee_id);
ALTER TABLE employees ADD CONSTRAINT emp_dept_fk FOREIGN KEY (department_id) REFERENCES departments(department_id);
ALTER TABLE employees ADD CONSTRAINT emp_job_fk FOREIGN KEY (job_id) REFERENCES jobs(job_id);
ALTER TABLE employees ADD CONSTRAINT emp_manager_fk FOREIGN KEY (manager_id) REFERENCES employees(employee_id);

-- Создание таблицы Job_History
CREATE TABLE job_history (
  employee_id NUMBER(6) CONSTRAINT jhist_employee_nn NOT NULL,
  start_date DATE CONSTRAINT jhist_start_date_nn NOT NULL,
  end_date DATE CONSTRAINT jhist_end_date_nn NOT NULL,
  job_id VARCHAR2(10) CONSTRAINT jhist_job_nn NOT NULL,
  department_id NUMBER(4)
);
ALTER TABLE job_history ADD CONSTRAINT jhist_emp_id_st_date_pk PRIMARY KEY (employee_id, start_date);
ALTER TABLE job_history ADD CONSTRAINT jhist_job_fk FOREIGN KEY (job_id) REFERENCES jobs(job_id);
ALTER TABLE job_history ADD CONSTRAINT jhist_dept_fk FOREIGN KEY (department_id) REFERENCES departments(department_id);
```

### 2. **Шаблон создания пользователей**

```sql
-- Создание пользователей
CREATE USER user_a IDENTIFIED BY password_a;
CREATE USER user_b IDENTIFIED BY password_b;
CREATE USER user_c IDENTIFIED BY password_c;

-- Выдача общих привилегий пользователям
GRANT CREATE SESSION TO user_a;
GRANT CREATE SESSION TO user_b;
GRANT CREATE SESSION TO user_c;
```

### 3. **Шаблон создания ролей и назначения прав**

```sql
-- Создание ролей
CREATE ROLE read_only_role;
CREATE ROLE data_entry_role;
CREATE ROLE manager_role;

-- Назначение прав ролям
GRANT SELECT ON employees TO read_only_role;
GRANT SELECT ON departments TO read_only_role;

GRANT INSERT ON employees TO data_entry_role;

GRANT INSERT, UPDATE ON departments TO manager_role;
GRANT data_entry_role TO manager_role;

-- Назначение ролей пользователям
GRANT read_only_role TO user_a;
GRANT data_entry_role TO user_b;
GRANT manager_role TO user_c;
```

### 4. **Шаблон для проверки**

После того как структура, пользователи и роли созданы, участники команды должны быть готовы продемонстрировать работоспособность всех элементов:

- **Проверка прав**:
  Подключитесь к базе данных как разные пользователи и выполните следующие команды:

  - **User A (read_only_role)**:
    ```sql
    SELECT * FROM employees;
    ```

  - **User B (data_entry_role)**:
    ```sql
    INSERT INTO employees (employee_id, first_name, last_name, email, hire_date, job_id) 
    VALUES (201, 'John', 'Doe', 'johndoe@example.com', SYSDATE, 'IT_PROG');
    ```

  - **User C (manager_role)**:
    ```sql
    UPDATE departments SET department_name = 'HR' WHERE department_id = 10;
    ```

### Заключение

Каждый участник команды должен уметь объяснить:
- Как они создали структуру БД.
- Как назначены права ролям.
- Как пользователи взаимодействуют с таблицами в зависимости от выданных им ролей.
