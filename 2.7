### Седьмое задание: **Повторить задания 2 и 5, подключившись к БД одногруппника (не выдавать SYS!)**.

Это задание предполагает, что ты подключишься к базе данных своего одногруппника и повторишь создание схемы, таблиц, а также настройку прав доступа. Поскольку подключение будет происходить к другой базе данных, ты не будешь иметь привилегий администратора (SYS), и права нужно будет настраивать через команды GRANT.

### Шаги для PostgreSQL

1. **Подключись к базе данных одногруппника** от имени своего пользователя. Одногруппник должен предоставить тебе доступ к базе данных через команду:
   ```sql
   GRANT CONNECT ON DATABASE your_database_name TO user_b;
   ```

   Подключись:
   ```bash
   psql -U user_b -h ip_address_of_your_teammate -d your_database_name
   ```

2. **Создай таблицы в схеме пользователя Б на базе одногруппника**:
   Повтори шаги из задания 2:
   ```sql
   CREATE TABLE students (
       id SERIAL PRIMARY KEY,
       name VARCHAR(100),
       age INT
   );

   CREATE TABLE groups (
       id SERIAL PRIMARY KEY,
       group_name VARCHAR(100)
   );

   CREATE TABLE group_piple (
       group_name VARCHAR(100),
       piple INT,
       FOREIGN KEY (group_name) REFERENCES groups(group_name)
   );
   ```

3. **Проверь доступ пользователя С на базе данных одногруппника**:
   Если права пользователя С недостаточны для выполнения запросов, одногруппник должен предоставить их через GRANT, как это было в предыдущих заданиях.

### Шаги для Oracle

1. **Подключись к базе данных одногруппника**. Одногруппник должен предоставить тебе доступ с помощью команды:
   ```sql
   GRANT CREATE SESSION TO user_b;
   ```

   Подключись:
   ```bash
   sqlplus user_b/password_b@//ip_address_of_teammate:1521/your_database_name
   ```

2. **Создай таблицы в схеме пользователя Б на базе одногруппника**:
   Повтори создание таблиц:
   ```sql
   CREATE TABLE students (
       id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
       name VARCHAR2(100),
       age NUMBER
   );

   CREATE TABLE groups (
       id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
       group_name VARCHAR2(100)
   );

   CREATE TABLE group_piple (
       group_name VARCHAR2(100),
       piple NUMBER,
       CONSTRAINT fk_group FOREIGN KEY (group_name) REFERENCES groups(group_name)
   );
   ```

3. **Проверь права пользователя С на базе данных одногруппника**:
   Если права пользователя С не позволяют изменять или просматривать данные, одногруппник должен выдать права с помощью команд GRANT.

### Что ожидать:
- После подключения к базе данных одногруппника ты повторишь создание таблиц.
- Проверь, может ли пользователь С выполнять запросы на изменение данных.
- Если у пользователя С нет прав, убедись, что они предоставлены корректно.

После выполнения этого задания мы сможем двигаться дальше. Сообщи о результате!
